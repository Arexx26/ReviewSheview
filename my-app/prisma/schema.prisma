// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



   datasource db {
     provider = "sqlite"
     url      = "file:./dev.db"
   }

   generator client {
     provider = "prisma-client-js"
   }

   model Account {
     id                 String  @id @default(cuid())
     userId             String
     type               String
     provider           String
     providerAccountId  String
     refresh_token      String?
     access_token       String?
     expires_at         Int?
     token_type         String?
     scope              String?
     id_token           String?
     session_state      String?
     user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

     @@unique([provider, providerAccountId])
   }

   model Session {
     id           String   @id @default(cuid())
     sessionToken String   @unique
     userId       String
     expires      DateTime
     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   }

   model User {
     id               String            @id @default(cuid())
     name             String?
     email            String?           @unique
     emailVerified    DateTime?
     image            String?
     accounts         Account[]
     sessions         Session[]
     ratings          Rating[]
     groups           Group[]
     groupMemberships GroupMembership[]
   }

   model VerificationToken {
     identifier String
     token      String   @unique
     expires    DateTime

     @@unique([identifier, token])
   }

   model Group {
     id               String            @id @default(cuid())
     name             String
     members          User[]
     ratings          GroupRating[]
     groupMemberships GroupMembership[]
   }

   model GroupMembership {
     id      String @id @default(cuid())
     userId  String
     groupId String
     user    User   @relation(fields: [userId], references: [id])
     group   Group  @relation(fields: [groupId], references: [id])
   }

   model Rating {
     id        String   @id @default(cuid())
     value     Int
     userId    String
     mediaId   Int
     user      User     @relation(fields: [userId], references: [id])
     media     Media    @relation(fields: [mediaId], references: [id])
     createdAt DateTime @default(now())

     @@unique([userId, mediaId])
   }

   model GroupRating {
     id            String @id @default(cuid())
     groupId       String
     mediaId       Int
     group         Group  @relation(fields: [groupId], references: [id])
     media         Media  @relation(fields: [mediaId], references: [id])
     averageRating Float
   }

   model Media {
     id           Int           @id @default(autoincrement())
     title        String
     ratings      Rating[]
     groupRatings GroupRating[]
     // Add other fields as necessary
   }